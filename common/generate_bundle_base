#!/bin/bash
#
# PLEASE AVOID PUTTING BUNDLE-SPECIFIC CODE IN HERE. INSTEAD USE THE INDIVIDUAL
# BUNDLE GENERATORS.
#
declare -A overlays_deduped=()
declare -a overlay_opts=()

# Catch any changes/additions to master opts
update_master_opts ${MOD_PASSTHROUGH_OPTS[@]}

vip_start=${MASTER_OPTS[VIP_ADDR_START]}
VIP_START_PREFIX=${vip_start%\.*}
VIP_START_SUFFIX=${vip_start##*\.}

if [ -z "$MOD_BASE_TEMPLATE" ]; then
    echo "ERROR: no template provided with --template"
    exit 1
elif [ -z "$MOD_DIR" ]; then
    echo "ERROR: no module name provided"
    exit 1
fi

# If we need a model for this deployment, ensure it exists
ensure_model
if [ -n "${MASTER_OPTS[MODEL_CONFIG]}" ]; then
    juju model-config ${MASTER_OPTS[MODEL_CONFIG]}
fi

if has_opt --list; then
    state_root=`get_bundle_state_root`
    if [ -d "$state_root" ]; then
        echo -e "Existing bundles:\n./b (default)"
        find $state_root/* -maxdepth 0 -type d| egrep -v "/o$|resources"
        echo ""
    else
        echo "There are currently no bundles."
    fi
    exit
fi

bundles_dir=`get_bundle_state_dir`
mkdir -p $bundles_dir

finish ()
{
    local target

    echo "${MOD_DIR}/generate-bundle.sh ${CACHED_STDIN[@]}" > ${bundles_dir}/generate-command
    if has_opt --replay; then
        target=${bundles_dir}/command
        echo -e "INFO: replaying last known command (from $target)\n"
        [ -e "$target" ] || { echo "ERROR: $target does not exist"; exit 1; }
    fi
    echo "Command to deploy:"
    cat ${bundles_dir}/command
    if has_opt --run; then
        . ${bundles_dir}/command
    fi
    has_opt --replay && exit 0 || true
}

# Replay ignores any input args and just prints the previously generated
# command.
has_opt --replay && finish

# Purge any existing overlays and parts
rm -f $bundles_dir/o/*
rm -rf $bundles_dir/parts

# Establish what cloud provider is in use and if it's MAAS, use unit placement.
cloud=`juju show-model| sed -rn 's/.+cloud:\s*(.+).*/\1/p'| uniq`
type=`juju show-cloud $cloud| sed -rn 's/^type:\s*(.+).*/\1/p'| uniq`
if [[ $type = maas ]]; then
    echo "INFO: maas provider detected - enabling hyperconverged deployment"
    MASTER_OPTS[HYPERCONVERGED_DEPLOYMENT]=true
fi

# load renderers
RENDER_PARTS_DIR=$bundles_dir/parts
mkdir -p $RENDER_PARTS_DIR
. $MOD_DIR/common/render.d/all
. $MOD_DIR/common/render.d/resources
if ${MASTER_OPTS[HYPERCONVERGED_DEPLOYMENT]}; then
    if [[ -z ${MASTER_OPTS[DEFAULT_BINDING]:-""} ]]; then
        echo "ERROR: no default binding provided. Use --default-binding"
        exit 1
    fi
    PLACEMENT_OVERLAYS_DIR=$bundles_dir/p
    mkdir -p $PLACEMENT_OVERLAYS_DIR
    . $MOD_DIR/common/render.d/unit_placement
fi

# Make copy of base template, render, and store in named dir.
dtmp=`mktemp -d`
template_path=$dtmp/`basename $MOD_BASE_TEMPLATE`
bundle=${template_path%%.template}
cp $MOD_DIR/$MOD_BASE_TEMPLATE $bundle
render $bundle
mv $bundle $bundles_dir
if [ -r "$INTERNAL_BUNDLE_CONFIG" ]; then
    cp $INTERNAL_BUNDLE_CONFIG $bundles_dir/config
fi
rmdir $dtmp

# Copy base bundle resources to bundles dir (if exists)
resource_path=$MOD_DIR/resources/
if [ -d "$resource_path" ]; then
    mkdir -p $bundles_dir/resources
    name=`basename $bundle`
    if [ -d "$resource_path/${name%%.yaml}" ]; then
        cp -r $resource_path/${name%%.yaml} $bundles_dir/resources
        # add absolute path for resources
        render_resources_path $bundles_dir/$name
    fi
fi

# De-duplicate overlay list and create bundle structure.
declare -a overlay_list=()

if ((${#MOD_OVERLAYS[@]})); then
    mkdir -p $bundles_dir/o
    declare -a msgs=()
    for overlay in ${MOD_OVERLAYS[@]}; do
        [ "${overlays_deduped[$overlay]:-null}" = "null" ] || continue
        cp $MOD_DIR/overlays/$overlay $bundles_dir/o
        ((${#overlay_opts[@]}==0)) && overlay_opts+=("")  # left padding
        overlay_opts+=( --overlay $bundles_dir/o/$overlay )
        overlay_list+=( "$bundles_dir/o/$overlay" )
        render $bundles_dir/o/$overlay
        overlays_deduped[$overlay]=true
        msgs+=( " + $overlay\n" )
        # Copy overla resources to bundles dir (if exists)
        resource_path=$MOD_DIR/resources/${overlay%%.*}
        if [ -d "$resource_path" ]; then
            mkdir -p $bundles_dir/resources
            cp -r $resource_path $bundles_dir/resources
            # add absolute path for resources
            render_resources_path $bundles_dir/o/$overlay
        fi
    done

    echo "Created ${MASTER_OPTS[TARGET_RELEASE_NAME]} bundle and overlays:"
    echo -e " ${msgs[@]}"
else
    echo -e "Created ${MASTER_OPTS[TARGET_RELEASE_NAME]} bundle\n"
fi

# put together any mysql interface parts that may have been generated as part
# of render()
aggregate_mysql_interface_parts $bundles_dir/o

# generate bundle list
base_bundle=$bundles_dir/`basename $bundle`
overlay_list+=( $base_bundle )
readarray -t application_list < <("$MOD_DIR/../tools/juju-bundle-applications.py" ${overlay_list[@]})

# Generate placement overlay for use with MAAS provider
if ${MASTER_OPTS[HYPERCONVERGED_DEPLOYMENT]}; then
    cp  $MOD_DIR/overlays/unit_placement/header.yaml.template $bundles_dir/unit-placement.yaml
    # these two represent total machines since e.g. ceph is deployed on compute but compute and gateway are never colocated
    num_placement_machines=$((${MOD_PARAMS[__NUM_NEUTRON_GATEWAY_UNITS__]}+${MOD_PARAMS[__NUM_COMPUTE_UNITS__]}))
    # detect all apps used and generate placement info by doing:
    #  * search for all app names in generated bundles/overlays
    #  * search unit_placement template with same name
    for app in ${application_list[@]}; do
        # filter juju keywords
        [[ $app == "options" ]] || [[ $app == "to" ]] || [[ $app == "storage" ]] && continue
        app_placement=${app}.yaml
        t=$MOD_DIR/overlays/unit_placement/${app_placement}.template
        [ -r "$t" ] || continue
        # load template
        cp $t $PLACEMENT_OVERLAYS_DIR/$app_placement
        # apply all renderers
        render_placement_units_lxd $PLACEMENT_OVERLAYS_DIR/$app_placement $num_placement_machines
        render_placement_units_metal $PLACEMENT_OVERLAYS_DIR/$app_placement $num_placement_machines
        render $PLACEMENT_OVERLAYS_DIR/$app_placement
        # add to master placement overlay
        cat $PLACEMENT_OVERLAYS_DIR/$app_placement >> $bundles_dir/unit-placement.yaml
    done
    # finally render master machine list
    render_placement_machines $bundles_dir/unit-placement.yaml $num_placement_machines
    render $bundles_dir/unit-placement.yaml
    # and add to list of overlays
    overlay_opts+=( --overlay $bundles_dir/unit-placement.yaml )

    # add default binding to all applications
    bindings="\    bindings:\n      '': ${MASTER_OPTS[DEFAULT_BINDING]}"
    find $bundles_dir -name \*.yaml| xargs -l sed -i -r "/^\s+charm:.+/a$bindings"
fi

((${#overlay_opts[@]})) && overlay_opts+=("")  # right padding

echo -e "juju deploy${JUJU_DEPLOY_OPTS} ${base_bundle}${overlay_opts[@]:- }\n " > ${bundles_dir}/command
finish

for f in $INTERNAL_BUNDLE_CONFIG; do
    [ -n "$f" ] && [ -r "$f" ] && rm -f $f
done
